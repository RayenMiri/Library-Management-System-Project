/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package BilbioFramesPanels;
import MyClasses.*;
import java.sql.*;
import javax.swing.table.DefaultTableModel;
import MyFrames.*;
/**
 *
 * @author GLADIATEUR-1650-8
 */
public class NotifierUtil extends javax.swing.JPanel {
    private static NotifierUtil instance;
    public Utilisateur user;
    /**
     * Creates new form Home
     */
    public NotifierUtil(Utilisateur user) {
        initComponents();
        this.user = user;
        jTable1.getColumnModel().getColumn(6).setCellRenderer(new NotifTableActionCellRender());
        jTable1.getColumnModel().getColumn(6).setCellEditor(new NotifActionsEditor());
        populateTable();
        checkReservedBooks();
    }
    private void checkReservedBooks() {
        Connection connection = null;
        Statement statement = null;
        ResultSet resultSet= null;
        try {
            connection = DBConnection.openConnection();
            statement = connection.createStatement();

            
            resultSet = statement.executeQuery("SELECT id_utilisateur, id_livre FROM reservation WHERE id_livre IN (SELECT id_livre FROM livre WHERE dispo = 'Disponible')");
            while (resultSet.next()) {
                String user = resultSet.getString("id_utilisateur");
                String livre = resultSet.getString("id_livre");

                
                Statement innerStatement = connection.createStatement();

                
                ResultSet notificationCheck = innerStatement.executeQuery("SELECT * FROM notification WHERE id_utilisateur = '" + user + "' AND notif_text = 'Le livre (" + livre + ") est disponible '");
                if (!notificationCheck.next()) {
                    
                    PreparedStatement insertNotification = connection.prepareStatement("INSERT INTO notification VALUES (?, ?, ?)");
                    insertNotification.setString(1, "N" + java.util.UUID.randomUUID().toString());
                    insertNotification.setString(2, user);
                    insertNotification.setString(3, "Le livre (" + livre + ") est disponible");
                    insertNotification.executeUpdate();
                }

                
                innerStatement.close();
            }

            connection.close();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
    private void populateTable() {
        Connection conn = null;
        Statement stmt = null;
        ResultSet rs = null;
        try {                   
            conn = DBConnection.openConnection();
            stmt = conn.createStatement();
            rs = stmt.executeQuery("SELECT * FROM emprunt");

            DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
            
            while (rs.next()) {
                model.addRow(new Object[]{
                rs.getString("id_emprunt"),
                rs.getString("id_utilisateur"),
                rs.getString("id_livre"),
                rs.getDate("date_emprunt"),
                rs.getDate("date_retour"),
                rs.getString("statut")
           
            }); }
            rs.close();
            stmt.close();
            DBConnection.closeConnection();
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }
    
    public static NotifierUtil getInstance(Utilisateur user){
        if(instance !=null){
            return instance;
        }else{
            return new NotifierUtil(user);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();

        setBackground(new java.awt.Color(102, 102, 102));

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "id_emprunt", "id_utilisateur", "id_livre", "date_emprunt", "date_retour", "statut", "action"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Object.class, java.lang.Object.class, java.lang.String.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTable1.setRowHeight(40);
        jScrollPane1.setViewportView(jTable1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 1000, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 620, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    // End of variables declaration//GEN-END:variables
}
